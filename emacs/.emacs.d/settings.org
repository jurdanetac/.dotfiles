#+TITLE: Personal Emacs configuration
#+AUTHOR: jurdanetac
#+STARTUP: content

* Load these settings on your init.el!
  Using Org mode to tweak Emacs is a great way to organize and highlight parts
  of your custom configuration. Remember to load this org file in your init.el!

#+BEGIN_SRC
(org-babel-load-file
 (expand-file-name "settings.org"
                   user-emacs-directory))
#+END_SRC

* Add-ons
** Sources
   MELPA is an ELPA-compatible package repository that contains an enormous
   amount of useful Emacs packages. In contrast to ELPA, Emacs is not configured
   by default to install packages from MELPA. You will have to configure it.

#+BEGIN_SRC emacs-lisp
(require 'package)
(add-to-list 'package-archives
             '("melpa" . "https://melpa.org/packages/") t)

;; Update package archives if no past data is found
(unless package-archive-contents
  (package-refresh-contents))
#+END_SRC

** Packages

#+BEGIN_SRC emacs-lisp
;; Use-package declaration for simplifying your .emacs
(unless (package-installed-p 'use-package)
  (package-install 'use-package))

;; Ensure all packages are installed on launch
(setq use-package-always-ensure t)

;; Vi emulation layer
(use-package evil
  :init (evil-mode 1))

;;  Minor mode that deals with parens pairs and tries to be smart about it
(use-package smartparens
  :config
  (setq sp-highlight-pair-overlay nil)
  (smartparens-global-mode t))
#+END_SRC

** Theme
   An opinionated pack of modern color-themes, a fancy and fast mode-line
   inspired by minimalism design and pretty icons. (Doom Emacs theme)

#+BEGIN_SRC emacs-lisp
(use-package doom-themes
  :init (load-theme 'doom-one t))

(use-package doom-modeline
  :init (doom-modeline-mode 1))

(use-package all-the-icons)
#+END_SRC

* UI Tweaks
** Lines and characters

#+BEGIN_SRC emacs-lisp
;; Display line numbers and truncate long lines
(global-display-line-numbers-mode 1)
(global-visual-line-mode t)

;; Display matching pairs of ()[]{} without delay
(setq show-paren-delay 0)
(show-paren-mode 1)
#+END_SRC

** Disable stuff

#+BEGIN_SRC emacs-lisp
;; Hide interface tools
(setq inhibit-startup-screen t)
(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)

;; Disable all alarms, sound is annoying and visual bell hangs the screen for a
;; while when top/bottom is reached with mouse scrolling
(setq ring-bell-function 'ignore)

;; Mouse scrolling >100 gets rid of half page jumping
(setq scroll-conservatively 101)
#+END_SRC

* Whitespace
  I like the MSWord-like approach of the pilcrow (¶) toggle formatting marks

#+BEGIN_SRC emacs-lisp
;; Use spaces instead of tabs
(setq-default indent-tabs-mode nil)

;; Highlight whitespace and after-80 columns
(setq whitespace-style '(face trailing space-mark tab-mark lines-tail))
(global-whitespace-mode t)

;; Delete trailing whitespace on save
(add-hook 'before-save-hook
          (lambda ()
            (unless (eq major-mode 'fundamental-mode)
              (delete-trailing-whitespace))))
#+END_SRC

* Dashboard
  An extensible emacs startup screen showing you what’s most important.

#+BEGIN_SRC emacs-lisp
(use-package dashboard
  :init
  (setq dashboard-center-content t)
  (setq dashboard-set-file-icons t)
  (setq dashboard-startup-banner "~/.emacs.d/banners/oldlogo.png")
  (setq dashboard-banner-logo-title "An extensible, customizable, free/libre text editor — and more!")
  :config
  (dashboard-setup-startup-hook))
#+END_SRC
* Programming Languages
  TODO: mainly major-modes config as linting...

** Python
   Load out-of-the-box Flymake, a universal on-the-fly buffer checker
   Pyflakes must be installed for backend, run: $ pip install --upgrade pyflakes

#+BEGIN_SRC emacs-lisp
(when (load "flymake" t)
  (defun flymake-pyflakes-init ()
    (let* ((temp-file (flymake-init-create-temp-buffer-copy
                       'flymake-create-temp-inplace))
           (local-file (file-relative-name
                        temp-file
                           (file-name-directory buffer-file-name))))
  (list "pyflakes" (list local-file))))

  (add-to-list 'flymake-allowed-file-name-masks
               '("\\.py\\'" flymake-pyflakes-init)))

(add-hook 'find-file-hook 'flymake-find-file-hook)
#+END_SRC
* Keybindings
  These are user-defined shorcuts for functions, re-binding, etc...
  Vi-like layer is covered by Evil mode on Packages!

** Shortcuts for +/- zooming

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-=") 'text-scale-increase)
(global-set-key (kbd "C--") 'text-scale-decrease)
#+END_SRC

** Flymake

#+BEGIN_SRC emacs-lisp
(define-key flymake-mode-map (kbd "M-n") 'flymake-goto-next-error)
(define-key flymake-mode-map (kbd "M-p") 'flymake-goto-prev-error)
#+END_SRC
