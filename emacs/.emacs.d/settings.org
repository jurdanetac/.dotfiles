#+TITLE: Personal Emacs configuration
#+AUTHOR: jurdanetac
#+STARTUP: content

* Load these settings on your init.el!
Using Org mode to tweak Emacs is a great way to organize and highlight parts
of your custom configuration. Remember to load this org file in your init.el!

#+BEGIN_EXAMPLE
(require 'org)
(org-babel-load-file
 (expand-file-name "settings.org"
                   user-emacs-directory))
#+END_EXAMPLE

* Startup performance
Profile Emacs startup. TODO: Optimize

#+BEGIN_SRC emacs-lisp
(add-hook 'emacs-startup-hook
          (lambda ()
            (message "*** Emacs loaded in %s with %d garbage collections."
                     (format "%.2f seconds"
                             (float-time
                              (time-subtract after-init-time before-init-time)))
                     gcs-done)))
#+END_SRC

* Add-ons
** Sources
MELPA is an ELPA-compatible package repository that contains an enormous
amount of useful Emacs packages. In contrast to ELPA, Emacs is not configured
by default to install packages from MELPA. You will have to configure it.

#+BEGIN_SRC emacs-lisp
(require 'package)
(add-to-list 'package-archives
             '("melpa" . "https://melpa.org/packages/") t)

;; Update package archives if no past data is found
(unless package-archive-contents
  (package-refresh-contents))
#+END_SRC

** Packages
*** Use-package
Use-package declaration for simplifying your .emacs

#+BEGIN_SRC emacs-lisp
(unless (package-installed-p 'use-package)
  (package-install 'use-package))

;; Ensure all packages are installed on launch
(require 'use-package-ensure)
(setq use-package-always-ensure t)
#+END_SRC

*** Evil mode
The extensible vi layer for Emacs.

#+BEGIN_SRC emacs-lisp
(use-package evil
  :init
  ;; Split a window below/right the current one
  (setq evil-vsplit-window-right t)
  (setq evil-split-window-below t)
  ;; Evil collection assumes this setting is set to nil
  (setq evil-want-keybinding nil)
  :config
  ;; :q should kill the current buffer rather than quitting Emacs entirely
  (evil-ex-define-cmd "q" 'kill-current-buffer)
  ;; Type :quit to close Emacs
  (evil-ex-define-cmd "quit" 'evil-quit)
  (evil-mode 1))
#+END_SRC

*** Evil collection
This is a collection of Evil bindings for the parts of Emacs that Evil does
not cover properly by default, such as help-mode, M-x calendar, Eshell...

#+BEGIN_SRC emacs-lisp
(use-package evil-collection
  :after evil
  :init
  (evil-collection-init))
#+END_SRC

*** Flycheck
On the fly syntax checking for GNU Emacs. Flycheck does not check buffers
itself but relies on external programs to check buffers!

#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :init (global-flycheck-mode))
#+END_SRC

*** Smartparens
Minor mode that deals with parens pairs and tries to be smart about it

#+BEGIN_SRC emacs-lisp
(use-package smartparens
  :config
  (setq sp-highlight-pair-overlay nil)
  (smartparens-global-mode t))
#+END_SRC

*** Magit
It's Magit! A Git porcelain inside Emacs.

#+BEGIN_SRC emacs-lisp
(use-package magit)
#+END_SRC

*** Which-key
Emacs package that displays available keybindings in popup

#+BEGIN_SRC emacs-lisp
(use-package which-key)
  :init (which-key-mode)
#+END_SRC

** Theme
An opinionated pack of modern color-themes, a fancy and fast mode-line
inspired by minimalism design and pretty icons. (Doom Emacs theme)

#+BEGIN_SRC emacs-lisp
(use-package doom-themes
  :init (load-theme 'doom-one t))

(use-package doom-modeline
  :init (doom-modeline-mode 1))

(use-package all-the-icons)
#+END_SRC

* UI Tweaks
** Lines and characters

#+BEGIN_SRC emacs-lisp
;; Display line numbers and truncate long lines
(global-display-line-numbers-mode 1)
(global-visual-line-mode t)

;; Enable hide-show minor mode globally for vim-like line folding
(add-hook 'prog-mode-hook #'hs-minor-mode)

;; Display matching pairs of ()[]{} without delay
(setq show-paren-delay 0)
(show-paren-mode 1)

;; HTML tag completion prompt
(setq sgml-quick-keys 'close)
#+END_SRC

** Disable stuff

#+BEGIN_SRC emacs-lisp
;; Hide interface tools
(setq inhibit-startup-screen t)
(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)

;; Disable all alarms, sound is annoying and visual bell hangs the screen for a
;; while when top/bottom is reached with mouse scrolling
(setq ring-bell-function 'ignore)

;; Mouse scrolling >100 gets rid of half page jumping
(setq scroll-conservatively 101)
#+END_SRC

** Shortcuts for +/- zooming

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-=") 'text-scale-increase)
(global-set-key (kbd "C--") 'text-scale-decrease)
#+END_SRC

* Whitespace
I like the MSWord-like approach of the pilcrow (¶) toggle formatting marks

#+BEGIN_SRC emacs-lisp
;; Use spaces instead of tabs
(setq-default indent-tabs-mode nil)

;; Highlight whitespace and after-80 columns
(require 'whitespace)
(setq whitespace-style '(face trailing space-mark tab-mark lines-tail))
(global-whitespace-mode t)

;; Delete trailing whitespace on save
(add-hook 'before-save-hook
          (lambda ()
            (unless (eq major-mode 'fundamental-mode)
              (delete-trailing-whitespace))))
#+END_SRC

* Org Mode
A GNU Emacs major mode for convenient plain text markup — and much more

#+BEGIN_SRC emacs-lisp
;; When active, indent text according to outline structure
(add-hook 'org-mode-hook 'org-indent-mode)

(setq org-directory "~/Documents/org/"
      org-agenda-files '("~/Documents/org/agenda.org")
      org-default-notes-file (expand-file-name "notes.org" org-directory)
      org-ellipsis " ▼ "
      ;; Information to record when a task moves to the DONE state
      org-log-done 'time
      ;; Display images on org files: [[~/your/image/path.png]]
      org-startup-with-inline-images t)
#+END_SRC

* Dashboard
An extensible emacs startup screen showing you what’s most important.

#+BEGIN_SRC emacs-lisp
(use-package dashboard
  :init
  (setq dashboard-center-content t)
  (setq dashboard-set-file-icons t)
  (setq dashboard-startup-banner "~/.emacs.d/banners/oldlogo.png")
  (setq dashboard-banner-logo-title "An extensible, customizable, free/libre text editor — and more!")
  :config
  (dashboard-setup-startup-hook))
#+END_SRC
