#+TITLE: Personal Emacs configuration
#+AUTHOR: jurdanetac
#+STARTUP: overview

* Load these settings on your init.el!
Using Org mode to tweak Emacs is a great way to organize and highlight parts
of your custom configuration. Remember to load this org file in your init.el!

#+begin_example
(require 'org)
(org-babel-load-file
 (expand-file-name "settings.org"
                   user-emacs-directory))
#+end_example

* Startup performance
Make startup faster by reducing the frequency of garbage collection and then use
a hook to measure Emacs startup time

#+begin_src emacs-lisp
;; The default is 800 kilobytes.  Measured in bytes.
(setq gc-cons-threshold (* 50 1000 1000))

;; Profile emacs startup
(add-hook 'emacs-startup-hook
          (lambda ()
            (message "*** Emacs loaded in %s with %d garbage collections."
                     (format "%.2f seconds"
                             (float-time
                              (time-subtract after-init-time before-init-time)))
                     gcs-done)))
#+end_src

* Add-ons
** Sources
MELPA is an ELPA-compatible package repository that contains an enormous
amount of useful Emacs packages. In contrast to ELPA, Emacs is not configured
by default to install packages from MELPA. You will have to configure it.

TODO: expand

#+begin_src emacs-lisp
(require 'package)
;; For versions <= 9.5, orgmode.org hosts Org ELPA archives.
;; Beware that no new Org versions will be released on Org ELPA after 9.5
(setq package-archives '(("melpa" . "https://melpa.org/packages/")
                         ("melpa-stable" . "https://stable.melpa.org/packages/")
                         ("org" . "https://orgmode.org/elpa/")
                         ("elpa" . "https://elpa.gnu.org/packages/")))

;; Update package archives if no past data is found
(unless package-archive-contents
  (package-refresh-contents))
#+end_src

** Packages
*** Use-package
Use-package declaration for simplifying your .emacs

#+begin_src emacs-lisp
(unless (package-installed-p 'use-package)
  (package-install 'use-package))

(eval-when-compile
  (require 'use-package))

;; Ensure all packages are installed on launch
(require 'use-package-ensure)
(setq use-package-always-ensure t)
#+end_src

*** Evil mode
The extensible vi layer for Emacs and it's "dependencies"

#+begin_src emacs-lisp
;; Required for Evil's `C-r`
(use-package undo-tree
  :init (global-undo-tree-mode 1))

;; Remap universal-argument to allow Evil's `C-u`
(global-set-key (kbd "C-M-u") 'universal-argument)

(use-package evil
  :after undo-tree
  :init
  (setq evil-want-C-u-scroll t
        evil-want-integration t
        evil-want-keybinding nil
        evil-split-window-below t
        evil-vsplit-window-right t
        evil-undo-system 'undo-tree)
  :config
  ;; :q should kill the current buffer rather than quitting Emacs entirely
  (evil-ex-define-cmd "q" 'kill-current-buffer)
  ;; Type :quit to close Emacs
  (evil-ex-define-cmd "quit" 'evil-quit)
  (evil-mode 1))

;; This is a collection of Evil bindings for the parts of Emacs that Evil does
;; not cover properly by default, such as help-mode, M-x calendar, Eshell...
(use-package evil-collection
  :after evil
  :init
  (evil-collection-init))
#+end_src

*** Flycheck
On the fly syntax checking for GNU Emacs. Flycheck does not check buffers
itself but relies on external programs to check buffers!

#+begin_src emacs-lisp
(use-package flycheck
  :init (global-flycheck-mode))
#+end_src

*** Smartparens
Minor mode that deals with parens pairs and tries to be smart about it

#+begin_src emacs-lisp
(use-package smartparens
  :config
  (setq sp-highlight-pair-overlay nil)
  (smartparens-global-mode t))
#+end_src

*** Magit
It's Magit! A Git porcelain inside Emacs.

#+begin_src emacs-lisp
(use-package magit)
#+end_src

*** Which-key
Emacs package that displays available keybindings in popup

#+begin_src emacs-lisp
(use-package which-key
  :init (which-key-mode)
  :config (setq which-key-idle-delay 0.3))
#+end_src

*** Org mode
A GNU Emacs major mode for convenient plain text markup — and much more

#+begin_src emacs-lisp
(use-package org
  :config
  (require 'org-tempo)
  (require 'ob-shell))

(unless (package-installed-p 'org-plus-contrib)
  (package-install 'org-plus-contrib))

;; Fix weird bug on first launch
(org-reload)
#+end_src

** Theme
An opinionated pack of modern color-themes, a fancy and fast mode-line
inspired by minimalism design and pretty icons. (Doom Emacs theme)

#+begin_src emacs-lisp
(use-package doom-themes
:init (load-theme 'doom-gruvbox t))

(use-package doom-modeline
  :init (doom-modeline-mode 1))

(use-package all-the-icons)
#+end_src

* UI Tweaks
** Lines and characters

#+begin_src emacs-lisp
;; Avoid surprises with the coding system
(set-default-coding-systems 'utf-8)

;; Display line numbers and truncate long lines
(global-display-line-numbers-mode 1)
(global-visual-line-mode t)

;; Enable hide-show minor mode globally for vim-like line folding
(add-hook 'prog-mode-hook #'hs-minor-mode)

;; Display matching pairs of ()[]{} without delay
(setq show-paren-delay 0)
(show-paren-mode 1)

;; HTML tag completion prompt
(setq sgml-quick-keys 'close)
#+end_src

** Disable stuff

#+begin_src emacs-lisp
;; Hide interface tools
(setq inhibit-startup-screen t)
(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)

;; Disable all alarms, sound is annoying and visual bell hangs the screen for a
;; while when top/bottom is reached with mouse scrolling
(setq ring-bell-function 'ignore)

;; Mouse scrolling >100 gets rid of half page jumping
(setq scroll-conservatively 101)
#+end_src

** Shortcuts for +/- zooming

#+begin_src emacs-lisp
(global-set-key (kbd "C-=") 'text-scale-increase)
(global-set-key (kbd "C--") 'text-scale-decrease)
#+end_src

* Whitespace
I like the MSWord-like approach of the pilcrow (¶) toggle formatting marks

#+begin_src emacs-lisp
;; Use spaces instead of tabs
(setq-default indent-tabs-mode nil)

;; Highlight whitespace and after-80 columns
(require 'whitespace)
(setq whitespace-style '(face trailing space-mark tab-mark lines-tail))
(global-whitespace-mode t)

;; Delete trailing whitespace on save
(add-hook 'before-save-hook
          (lambda ()
            (unless (eq major-mode 'fundamental-mode)
              (delete-trailing-whitespace))))
#+end_src

* Org Mode
Your life in plain text!

#+begin_src emacs-lisp
;; When active, indent text according to outline structure
(add-hook 'org-mode-hook 'org-indent-mode)
;; For any reason tab subtree cycling is not working after upgrading
;; `org` to version 9.4.6
(add-hook 'org-mode-hook
          (lambda () (global-set-key (kbd "<tab>") 'org-cycle)))

(setq org-directory "~/Documents/org/"
      org-agenda-files '("~/Documents/org/agenda.org")
      org-default-notes-file (expand-file-name "notes.org" org-directory)
      org-ellipsis " ▼ "
      org-support-shift-select t
      ;; Information to record when a task moves to the DONE state
      org-log-done 'time
      ;; Display images on org files: [[~/your/image/path.png]]
      org-startup-with-inline-images t
      ;; Before this drives me insane
      org-src-tab-acts-natively nil)

(global-set-key (kbd "C-c a") 'org-agenda)
(global-set-key (kbd "C-c s") 'org-schedule)
(global-set-key (kbd "C-c d") 'org-deadline)
#+end_src

* Dashboard
An extensible emacs startup screen showing you what’s most important.

#+begin_src emacs-lisp
(use-package dashboard
  :init
  (setq dashboard-center-content t)
  (setq dashboard-set-file-icons t)
  (setq dashboard-startup-banner "~/.emacs.d/banners/oldlogo.png")
  (setq dashboard-banner-logo-title "An extensible, customizable, free/libre text editor — and more!")
  :config
  (dashboard-setup-startup-hook))
#+end_src

* Runtime performance
Dial the GC threshold back down so that garbage collection happens more
frequently but in less time

#+begin_src emacs-lisp
;; Make gc pauses faster by decreasing the threshold.
(setq gc-cons-threshold (* 2 1000 1000))
#+end_src
